/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package calculatorapp;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Path2D;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author EdwinKaburu
 */
public class Chart extends javax.swing.JFrame {

    DefaultListModel memory = new DefaultListModel();
    
    /** Creates new form Chart */
    public Chart() {
        initComponents();
        for(int a =1; a <= 11; a++)
        {
            jComboBox1.addItem(Integer.toString(a));
            jComboBox2.addItem(Integer.toString(a));
        }
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(91, 91, 91));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 400));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        jButton1.setText("Draw Graph");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList1.setToolTipText("");
        jScrollPane1.setViewportView(jList1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("y =");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("x^2+");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(114, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int sum = 0;
        int point2 = 0;

        int middle = jPanel1.getWidth() / 2;
        int middle2 = jPanel1.getHeight() / 2;

        Graphics g = jPanel1.getGraphics();

        HashMap<Integer, Integer> map1 = new HashMap<>();
        HashMap<Integer, Integer> map2 = new HashMap<>();

        HashMap<List<Integer>, List<Integer>> map3 = new HashMap<>();

        for (int l = 0; l < 20; l++) {
            //Y - Lines
            sum += 25;
            g.setColor(Color.black);
            g.drawLine(sum, jPanel1.getHeight(), sum, 0);
            if (sum == middle)
            {
                g.setColor(Color.green);
                g.drawLine(sum, jPanel1.getHeight(), sum, 0);
            }

            map1.put(l, sum);

            //X-Lines
            point2 += 25;
            g.setColor(Color.black);
            g.drawLine(jPanel1.getWidth(), point2, 0, point2);
            if (point2 == middle2)
            {
                g.setColor(Color.green);
                g.drawLine(jPanel1.getWidth(), point2, 0, point2);
            }

            map2.put(l, point2);
        }
        
        DrawGraph(map1, map2,g, jComboBox1.getSelectedIndex(), jComboBox2.getSelectedIndex(), middle2);
        
//JOptionPane.showMessageDialog(null, jComboBox1.getSelectedItem() + "\tIndex\t" + jComboBox1.getSelectedIndex());
     //  jComboBox1.getSelectedItem()
        
       // jComboBox1.add(this, middle2)
       
        
        
//        System.out.println("---------------------------------------------------------\n--------------------------------------------");

        //        for(int a = 0; a < phase2.size() ; a ++)
        //        {
            //             //System.out.println("Y\t" + phase2.get(a) + "\t" + a );
            //
            ////            for (Map.Entry<Integer, Integer> entry : map1.entrySet())
            ////            {
                //                if(phase2.get(a) < middle)
                //                {
                    //                    // System.out.println("Y\t" + phase2.get(a) + "\t" + a );
                    //                }
                //                else
                //                {
                    //                     System.out.println("Y\t" + phase2.get(a) + "\t" + a );
                    //                }
                ////                if( phase2.get(a) < middle && entry.getValue().equals(phase2.get(a)) )
                ////                {
                    //////                    System.out.println("Y\t" + phase2.get(a) + "\t" + a + "\t" + (a-a));
                    ////                }
                ////                else
                ////                {
                    ////                     System.out.println("Y\t" + phase2.get(a) + "\t" + a );
                    ////                }
                //            //}
            //        }

//        System.out.println("---------------------------------------------------------\n--------------------------------------------");
//        int size1 = 0;
//        //List<Integer> vpoints = new ArrayList<Integer>();
//        List<Integer> vpoints2 = new ArrayList<Integer>();
////        List<Integer> x = new ArrayList<Integer>();
////
////        List<Integer> y = new ArrayList<Integer>();
//
//        HashMap<Integer, Integer> vpoints1 = new HashMap<>();
//        for(int a = -10 ;a< 10; a++)
//        {
//            int vpoint = 2*(a)+1;
//            System.out.println("x\t" + a +"\t y \t" + vpoint);
//            // vpoints.add(vpoint);
//            vpoints.put(a, vpoint);
//        }

//        for (Map.Entry<Integer, Integer> entry : map1.entrySet())
//        {
//            //System.out.println("Y-Lines\t" + entry.getValue());
//            for (Map.Entry<Integer, Integer> entry1 : map2.entrySet())
//            {
//                for (Map.Entry<Integer, Integer> ap : vpoints.entrySet())
//                {
//                    if (entry1.getValue() <= middle2)
//                    {
//                        // System.out.println("x\t" + entry.getValue() + "\t" +  entry1.getValue());
//                        if (entry.getValue() <= 250)
//                        {
//                            if(ap.getKey().equals((entry.getKey() - 9)) && ap.getValue().equals((7 - entry1.getKey())))
//                            {
//                                x.add(entry.getValue());
//                                y.add(entry1.getValue());
//                                // vpoints1.put((entry.getKey() - 9), (7 - entry1.getKey()));
//                                // vpoints1.put(entry.getValue(), entry1.getKey());
//                                //  System.out.println("p1\t" + entry.getValue() + "\tp2\t" +  entry1.getValue() + "\tx\t" + (entry.getKey() - 9) + "\t y \t"+ (7 - entry1.getKey()) );
//                            }
//                            //                   System.out.println("p1111\t" + entry.getValue() + "\tp2\t" +  entry1.getValue() + "\tx\t" + (entry.getKey() - 9) + "\t y \t"+ (7 - entry1.getKey()) );
//                            // if(ap == )
//                            // System.out.println("x\t" + entry.getValue() + "\t" +  entry1.getValue() + "\tx\t" + (entry.getKey() - 9) + "\t y \t"+ (7 - entry1.getKey())  );
//                        } else
//                        {
//                            if(ap.getKey().equals((entry.getKey() - 9)) && ap.getValue().equals((7 - entry1.getKey())))
//                            {
//                                x.add(entry.getValue());
//                                y.add(entry1.getValue());
//                                //vpoints1.put((entry.getKey() - 9), (7 - entry1.getKey()));
//                                // vpoints1.put(entry.getValue(), entry1.getKey());
//
//                                // vpoints2.add((entry.getKey() - 9)); // Change to HashSet------------------------------------->-.-.-.-.-..-.-.-.-.-.-.-__>_>_>_>>_>_>_
//                                // System.out.println("Found");
//
//                                //  System.out.println("p1\t" + entry.getValue() + "\tp2\t" +  entry1.getValue() + "\tx\t" + (entry.getKey() - 9) + "\t y \t"+ (7 - entry1.getKey()) );
//                            }
//                            //                            else
//                            //                            {
//                                System.out.println("p111\t" + entry.getValue() + "\tp2\t" +  entry1.getValue() + "\tx\t" + (entry.getKey() - 9) + "\t y \t"+ (7 - entry1.getKey()) );
//                                //                            }
//
//                        }
//                    }
//                    else
//                    {
//                        if (entry.getValue() <= 250)
//                        {
//                            if(ap.getKey().equals((entry.getKey() - 9)) && ap.getValue().equals((7 - entry1.getKey())))
//                            {
//                                x.add(entry.getValue());
//                                y.add(entry1.getValue());
//                                //vpoints1.put((entry.getKey() - 9), (7 - entry1.getKey()));
//                                //vpoints1.put(entry.getValue(), entry1.getKey());
//                                //   System.out.println("p1\t" + entry.getValue() + "\tp2\t" +  entry1.getValue() + "\tx\t" + (entry.getKey() - 9) + "\t y \t"+ (7 - entry1.getKey()) );
//                            }
//
//                            //              System.out.println("p1111\t" + entry.getValue() + "\tp2\t" +  entry1.getValue() + "\tx\t" + (entry.getKey() - 9) + "\t y \t"+ (7 - entry1.getKey()) );
//
//                        }
//                        else
//                        {
//                            if(ap.getKey().equals((entry.getKey() - 9)) && ap.getValue().equals((7 - entry1.getKey())))
//                            {
//                                x.add(entry.getValue());
//                                y.add(entry1.getValue());
//                                // vpoints1.put((entry.getKey() - 9), (7 - entry1.getKey()));
//                                //  vpoints1.put(entry.getValue(), entry1.getKey());
//                                //  System.out.println("p1\t" + entry.getValue() + "\tp2\t" + entry1.getValue() + "\tx\t" + (entry.getKey() - 9) + "\t y \t" + (7 - entry1.getKey()));
//                            }
//                            // System.out.println("p1111\t" + entry.getValue() + "\tp2\t" + entry1.getValue() + "\tx\t" + (entry.getKey() - 9) + "\t y \t" + (7 - entry1.getKey()));
//                            // System.out.println("p\t" + entry.getValue() + "\tp1\t" +  entry1.getValue() + "\tx\t" +(entry.getKey() - 9));
//                        }
//
//                    }
//                }
//
//            }
//        }
//        System.out.println("--------------------------------------");
//
//        //        List<Integer> x = new ArrayList<Integer>();
//        //
//        //        List<Integer> y = new ArrayList<Integer>();
//        //        int xpoints1[] = x.stream().mapToInt(i -> i).toArray();
//        //        int ypoints1[] = y.stream().mapToInt(i -> i).toArray();
//
//        for(Map.Entry<Integer, Integer> ap : vpoints1.entrySet())
//        {
//            //            x.add(ap.getKey());
//            //            y.add(ap.getValue());
//            //  System.out.println(ap.getKey());
//        }
//
//        for(int x1:   x)
//        {
//
//            // System.out.println(x1);
//        }
//        System.out.println("----------------");
//        for(int y1 : y)
//        {
//            //  System.out.println(y1);
//        }
//        Set<List<Integer>> sp = map3.keySet();
//
//        List<Integer> l2 = new ArrayList<Integer>();
//
//        //        List<Integer> x = new ArrayList<Integer>();
//        //
//        //        List<Integer> y = new ArrayList<Integer>();
//        l2.add(1);
//        l2.add(2);
//        l2.add(3);
//
//        g.setColor(Color.red);
//
//        //System.out.println(jPanel1.getAlignmentY());
//        int xpoints[] = x.stream().mapToInt(i -> i).toArray();
//        int ypoints[] = y.stream().mapToInt(i -> i).toArray();
//        g.drawPolyline(xpoints, ypoints, x.size());

        jPanel1.addMouseListener(new MouseAdapter() {
            @Override //I override only one method for presentation
            public void mousePressed(MouseEvent e) {
                //System.out.println(e.getX() + "," + e.getY());
                //                if (e.getX() == 250 || e.getY() == 200) {
                    //                    JOptionPane.showMessageDialog(null, "0 ,0");
                    //                } else {
                    JOptionPane.showMessageDialog(null, e.getX() + "," + e.getY());
                    //                }

            }
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    private  void DrawGraph(HashMap<Integer, Integer> map1,HashMap<Integer, Integer> map2,Graphics g, int slope1, int slope2, int middle2)
    {
        HashMap<Integer, Integer> vpoints = x_yPoints(slope1,slope2);
        
        String history = "";
//        // Get the History Data from the Numbers
//        for(String s : numbers)
//        {
//            // Concate All Values In the List into One String 
//            history = history.concat(s);
//        }
//        // Add it to the Jlist  and It is Displayed 
//        memory.addElement(history.concat(" = " + Float.toString(pointto)));
         // Add it to the Jlist  and It is Displayed 
//        jList1.setModel(memory);
        
        
        List<Integer> x = new ArrayList<Integer>();

        List<Integer> y = new ArrayList<Integer>();
        for (Map.Entry<Integer, Integer> entry : map1.entrySet())
        {
            for (Map.Entry<Integer, Integer> entry1 : map2.entrySet())
            {
                for (Map.Entry<Integer, Integer> ap : vpoints.entrySet())
                {
                   // history += history.concat("x: \t" + ap.getKey() + "\ty\t" + ap.getValue());
                    
                    memory.addElement("x: \t" + ap.getKey() + "\t  y  \t" + ap.getValue());
                    
                    if (entry1.getValue() <= middle2)
                    {
                        if (entry.getValue() <= 250)
                        {
                            if(ap.getKey().equals((entry.getKey() - 9)) && ap.getValue().equals((7 - entry1.getKey())))
                            {
                                x.add(entry.getValue());
                                y.add(entry1.getValue());
                            }
                        } else
                        {
                            if(ap.getKey().equals((entry.getKey() - 9)) && ap.getValue().equals((7 - entry1.getKey())))
                            {
                                x.add(entry.getValue());
                                y.add(entry1.getValue());
                            }
                            // System.out.println("p111\t" + entry.getValue() + "\tp2\t" +  entry1.getValue() + "\tx\t" + (entry.getKey() - 9) + "\t y \t"+ (7 - entry1.getKey()) );
                        }
                    }
                    else
                    {
                        if (entry.getValue() <= 250)
                        {
                            if(ap.getKey().equals((entry.getKey() - 9)) && ap.getValue().equals((7 - entry1.getKey())))
                            {
                                x.add(entry.getValue());
                                y.add(entry1.getValue());
                            }
                        }
                        else
                        {
                            if(ap.getKey().equals((entry.getKey() - 9)) && ap.getValue().equals((7 - entry1.getKey())))
                            {
                                x.add(entry.getValue());
                                y.add(entry1.getValue());
                            }
                        }

                    }
                }

            }
        }
       // System.out.println(history);
         jList1.setModel(memory);
        g.setColor(Color.red); //Set the Color of Graph
        int xpoints[] = x.stream().mapToInt(i -> i).toArray(); // Convert List to Array
        int ypoints[] = y.stream().mapToInt(i -> i).toArray(); //Convert List to Array
        g.drawPolyline(xpoints, ypoints, x.size()); // Draws the Graph
        
        
    }
    private static HashMap<Integer, Integer> x_yPoints(int slope1, int slope2)
    {
        HashMap<Integer, Integer> vpoints1 = new HashMap<>();
        for(int a = -10 ;a< 10; a++)
        {
            int vpoint = slope1*(a)+slope2;
            vpoints1.put(a, vpoint); // get the X and y Values
        }
        return vpoints1;
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
